package ClientPackage;


import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Image;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintWriter;

import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollBar;
import javax.swing.JTextField;
import static javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER;
import static javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS;
import static javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Anurag Gupta
 */
public class ChatFrame extends javax.swing.JFrame{
    
    private String username;
    private Socket clientSocket;
    private FriendManager friendManager;
    private GroupManager groupManager;
    private String myCurrentDirPath;
    private int myChatPanelHeight=0;
    public ChatFrame(String username ,String password) {
        
        
         initComponents();
         this.setVisible(false);
         this.setLocationRelativeTo(null);
         this.username=username;
         jScrollPane3.setHorizontalScrollBarPolicy(HORIZONTAL_SCROLLBAR_NEVER);
         Client myclient=new Client(this);
         friendManager=new FriendManager(this);
         groupManager=new GroupManager(this);
         clientSocket= myclient.getClientSocket();
         File temp =new File(".");
           try {
               this.myCurrentDirPath=temp.getCanonicalPath();
               } catch (IOException ex) {
             Logger.getLogger(ChatFrame.class.getName()).log(Level.SEVERE, null, ex);
             }
           this.selectedFriendOrGroupPanel.setVisible(false);
         setProfile(this.username,password);
        
        
    }
    public ChatFrame() {
        
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        clientName = new javax.swing.JLabel();
        clientProfilePhoto = new javax.swing.JLabel();
        friendAndGroup = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        groups = new javax.swing.JList();
        jScrollPane1 = new javax.swing.JScrollPane();
        friends = new javax.swing.JList();
        selectedFriendOrGroupPanel = new javax.swing.JPanel();
        selectedFriendOrGroupProfilePanel = new javax.swing.JPanel();
        friendOrGroupPhoto = new javax.swing.JLabel();
        friendOrGroupName = new javax.swing.JLabel();
        friendOrGroupStatus = new javax.swing.JLabel();
        friendOrGroupIsLogin = new javax.swing.JLabel();
        sendTextFeild = new javax.swing.JTextField();
        attachmentButton = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane3 = new javax.swing.JScrollPane();
        chatPanel = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        searchFriend = new javax.swing.JMenuItem();
        createGroup = new javax.swing.JMenuItem();
        updateStatus = new javax.swing.JMenuItem();
        clearChat = new javax.swing.JMenuItem();
        changePassword = new javax.swing.JMenuItem();
        logout = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        menuInstruct = new javax.swing.JMenuItem();
        menuAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 204, 255));

        clientName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        clientName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        clientName.setText("Anurag Gupta");
        clientName.setName(""); // NOI18N

        clientProfilePhoto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ClientPackage/useprofile.png"))); // NOI18N

        friendAndGroup.setBackground(new java.awt.Color(255, 204, 255));
        friendAndGroup.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        friendAndGroup.setOpaque(true);

        groups.setBackground(new java.awt.Color(0, 255, 255));
        groups.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        groups.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Family", "Room No. 44", "CSA", "CSE" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        groups.setFixedCellHeight(35);
        groups.setPreferredSize(new java.awt.Dimension(73, 146));
        groups.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                groupsMousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(groups);

        friendAndGroup.addTab("      Groups     ", jScrollPane2);

        friends.setBackground(new java.awt.Color(51, 255, 204));
        friends.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        friends.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        friends.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Kshitij Chaudhary", "Prince Jaiswal", "Divyanshu Mishra", " " };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        friends.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        friends.setFixedCellHeight(35);
        friends.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                friendsMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(friends);

        friendAndGroup.addTab("     Friends    ", jScrollPane1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(clientName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(friendAndGroup)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(clientProfilePhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 55, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(clientName, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clientProfilePhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(friendAndGroup, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        selectedFriendOrGroupProfilePanel.setBackground(new java.awt.Color(204, 204, 255));

        friendOrGroupPhoto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ClientPackage/friendphoto.png"))); // NOI18N
        friendOrGroupPhoto.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        friendOrGroupPhoto.setOpaque(true);

        friendOrGroupName.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        friendOrGroupName.setText("Friend's Name");

        friendOrGroupStatus.setFont(new java.awt.Font("Tempus Sans ITC", 3, 12)); // NOI18N
        friendOrGroupStatus.setText(" I am the one who knocks !!!");

        friendOrGroupIsLogin.setBackground(new java.awt.Color(255, 51, 51));
        friendOrGroupIsLogin.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        friendOrGroupIsLogin.setText("    OFFLINE");
        friendOrGroupIsLogin.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        friendOrGroupIsLogin.setOpaque(true);

        javax.swing.GroupLayout selectedFriendOrGroupProfilePanelLayout = new javax.swing.GroupLayout(selectedFriendOrGroupProfilePanel);
        selectedFriendOrGroupProfilePanel.setLayout(selectedFriendOrGroupProfilePanelLayout);
        selectedFriendOrGroupProfilePanelLayout.setHorizontalGroup(
            selectedFriendOrGroupProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selectedFriendOrGroupProfilePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(friendOrGroupPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(selectedFriendOrGroupProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(selectedFriendOrGroupProfilePanelLayout.createSequentialGroup()
                        .addComponent(friendOrGroupName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(friendOrGroupIsLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45))
                    .addGroup(selectedFriendOrGroupProfilePanelLayout.createSequentialGroup()
                        .addComponent(friendOrGroupStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        selectedFriendOrGroupProfilePanelLayout.setVerticalGroup(
            selectedFriendOrGroupProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selectedFriendOrGroupProfilePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(selectedFriendOrGroupProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(friendOrGroupIsLogin, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(friendOrGroupName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(friendOrGroupStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
            .addGroup(selectedFriendOrGroupProfilePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(friendOrGroupPhoto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        attachmentButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/package1/aatch.jpg"))); // NOI18N
        attachmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attachmentButtonActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(0, 255, 255));
        jButton2.setText("SEND");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        chatPanel.setBackground(new java.awt.Color(255, 255, 255));
        chatPanel.setAutoscrolls(true);

        javax.swing.GroupLayout chatPanelLayout = new javax.swing.GroupLayout(chatPanel);
        chatPanel.setLayout(chatPanelLayout);
        chatPanelLayout.setHorizontalGroup(
            chatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 443, Short.MAX_VALUE)
        );
        chatPanelLayout.setVerticalGroup(
            chatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 231, Short.MAX_VALUE)
        );

        jScrollPane3.setViewportView(chatPanel);

        javax.swing.GroupLayout selectedFriendOrGroupPanelLayout = new javax.swing.GroupLayout(selectedFriendOrGroupPanel);
        selectedFriendOrGroupPanel.setLayout(selectedFriendOrGroupPanelLayout);
        selectedFriendOrGroupPanelLayout.setHorizontalGroup(
            selectedFriendOrGroupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selectedFriendOrGroupPanelLayout.createSequentialGroup()
                .addGroup(selectedFriendOrGroupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(selectedFriendOrGroupProfilePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(selectedFriendOrGroupPanelLayout.createSequentialGroup()
                        .addComponent(sendTextFeild, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(attachmentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane3))
                .addContainerGap())
        );
        selectedFriendOrGroupPanelLayout.setVerticalGroup(
            selectedFriendOrGroupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selectedFriendOrGroupPanelLayout.createSequentialGroup()
                .addComponent(selectedFriendOrGroupProfilePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(selectedFriendOrGroupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                    .addComponent(sendTextFeild)
                    .addComponent(attachmentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenu1.setText("Options");

        searchFriend.setText("Search A Friend Or Group");
        searchFriend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFriendActionPerformed(evt);
            }
        });
        jMenu1.add(searchFriend);

        createGroup.setText("Create A Group");
        createGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createGroupActionPerformed(evt);
            }
        });
        jMenu1.add(createGroup);

        updateStatus.setText("Update Status");
        updateStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateStatusActionPerformed(evt);
            }
        });
        jMenu1.add(updateStatus);

        clearChat.setText("Clear Chat");
        clearChat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearChatActionPerformed(evt);
            }
        });
        jMenu1.add(clearChat);

        changePassword.setText("Change Password");
        jMenu1.add(changePassword);

        logout.setText("Logout");
        logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });
        jMenu1.add(logout);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Help");

        menuInstruct.setText("Instructions");
        menuInstruct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuInstructActionPerformed(evt);
            }
        });
        jMenu2.add(menuInstruct);

        menuAbout.setText("About");
        menuAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAboutActionPerformed(evt);
            }
        });
        jMenu2.add(menuAbout);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(selectedFriendOrGroupPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(selectedFriendOrGroupPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 389, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public void setProfile(String username,String password)
    {
        DefaultListModel model= new DefaultListModel();
        model.addElement("CHECK");
        model.addElement(username);
        model.addElement(password);
        sendToServer(model);
    }
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
        String sendMessage=sendTextFeild.getText();
        sendAndReceiveMessage(sendMessage,true);
        JScrollBar vertical = this.jScrollPane3.getVerticalScrollBar();
        vertical.setValue(this.myChatPanelHeight-40);
        sendTextFeild.setText(null);
    
         DefaultListModel model;
         DefaultListModel newmodel=new DefaultListModel();
         newmodel.addElement("MESSAGE");
         String user,path;
         if(this.friendAndGroup.getSelectedIndex()==1)
         {
             int p=this.friends.getSelectedIndex();
             newmodel.addElement("FRIEND");
            model=this.friendManager.friendlist.get(p);
            user=model.getElementAt(0).toString();
            path=this.myCurrentDirPath+"\\ChatHistory\\Friends\\"+user+".txt";
            newmodel.addElement(this.username);
            newmodel.addElement(user);
            newmodel.addElement(sendMessage);
         }
         else
         {
            int p=this.groups.getSelectedIndex();    
            model=this.groupManager.grouplist.get(p);
            user=model.getElementAt(0).toString();
            path=this.myCurrentDirPath+"\\ChatHistory\\Groups\\"+user+".txt";
            newmodel.addElement(user);
            newmodel.addElement(this.username);
            newmodel.addElement(sendMessage);
            newmodel.addElement(this.clientName);
         }
             System.out.print(path);
           File myfile=new File(path);
        try {
         
              PrintWriter pr=new PrintWriter(new BufferedWriter(new FileWriter(myfile,true)));
              String message="0"+sendMessage;
              System.out.println(message);
              pr.println(message);
              pr.close();
                
        } catch (IOException ex) {
            Logger.getLogger(ChatFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
             
         sendToServer(newmodel);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void friendsMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_friendsMousePressed
 
        this.chatPanel.removeAll();
        this.chatPanel.setPreferredSize(new Dimension(443,231));
        this.chatPanel.revalidate();
        this.chatPanel.repaint();
        int p=this.friends.getSelectedIndex();
        DefaultListModel model2=this.friendManager.friendlist.get(p);
        this.friendOrGroupName.setText(model2.elementAt(1).toString());
        this.friendOrGroupStatus.setText(model2.elementAt(2).toString());
         if(model2.elementAt(3).equals(true))
           {
               this.friendOrGroupIsLogin.setText("ONLINE");
               this.friendOrGroupIsLogin.setBackground(Color.green);
           }
           else
           {
               this.friendOrGroupIsLogin.setText("OFFLINE");
               this.friendOrGroupIsLogin.setBackground(Color.red); 
           }
         this.friendOrGroupIsLogin.setVisible(true);
          this.selectedFriendOrGroupPanel.setVisible(true);
          this.myChatPanelHeight=0;
          this.jScrollPane3.revalidate();
          this.jScrollPane3.repaint();
          restoreChatHistory(model2.getElementAt(0).toString(),true);
           JScrollBar vertical = this.jScrollPane3.getVerticalScrollBar();
           this.jScrollPane3.setVerticalScrollBarPolicy(VERTICAL_SCROLLBAR_AS_NEEDED);
           this.jScrollPane3.setAutoscrolls(true);
          System.out.println(this.myChatPanelHeight);
         
          
    }//GEN-LAST:event_friendsMousePressed

    private void attachmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attachmentButtonActionPerformed
        
        JFileChooser fileChooser=new JFileChooser();
        File myfile=null;
        fileChooser.setDialogTitle("Choose a file");
        if (fileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
          myfile=fileChooser.getSelectedFile();
        }
         DefaultListModel mymodel=new DefaultListModel();
         mymodel.addElement("FILE");
         if(this.friendAndGroup.getSelectedIndex()==1)
         {
            int p=this.friends.getSelectedIndex();
             mymodel.addElement("FRIEND");
             DefaultListModel model=this.friendManager.friendlist.get(p);
             String friendUser=model.elementAt(0).toString();
             mymodel.addElement(this.username);
             mymodel.addElement(friendUser);
         }
         else
         {
             int p=this.groups.getSelectedIndex();
             mymodel.addElement("GROUP");
             
             
         }
         byte[] buffer=loadFile(myfile);
         mymodel.addElement(buffer);
         System.out.println(buffer.length);
         sendToServer(mymodel);
         sendAndReciveFile(myfile,true);
    }//GEN-LAST:event_attachmentButtonActionPerformed

    private void menuInstructActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuInstructActionPerformed
       JOptionPane.showMessageDialog(null, "1. You can search for a friend and add him/her to your friend list by using Search User in Profile Menu.\n"
            + "2. You can create groups with your friends.\n"
            + "3. You can also search for groups using Search Groups in Profile Menu.\n"
            + "4. You can attach files while chatting which can be downloaded.\n"
            + "5. You can update status and tell your friends what is going on with you.\n"
            + "6. You can change your password if you want by using Change Password from Profile menu.");
    }//GEN-LAST:event_menuInstructActionPerformed

    private void menuAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAboutActionPerformed
        JOptionPane.showMessageDialog(null, "This Group On Chat Messenger is a chatting and file and image sharing\n"
            + " software made by students of MNNIT. In case of any issues , you can inform us at\nHackSlash@mnnit.ac.in");

    }//GEN-LAST:event_menuAboutActionPerformed

    private void clearChatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearChatActionPerformed
        int p=this.friendAndGroup.getSelectedIndex();
        String path;
           if(p==1)
           {
                p=this.friends.getSelectedIndex();
                DefaultListModel model=new DefaultListModel();
                model=this.friendManager.friendlist.get(p);
                path=this.myCurrentDirPath+"\\ChatHistory\\Friends\\"+model.getElementAt(0).toString()+".txt";    
           }
           else
           {
               p=this.groups.getSelectedIndex();
               DefaultListModel model=new DefaultListModel();
               model=this.groupManager.grouplist.get(p);
               path=this.myCurrentDirPath+"\\ChatHistory\\Groups\\"+model.getElementAt(0).toString()+".txt";
           }
           File myfile=new File(path);
            try {
         
                 PrintWriter pr=new PrintWriter(new BufferedWriter(new FileWriter(myfile,false)));
                 pr.write("");
                 pr.close();
                
                } catch (IOException ex) {
                  Logger.getLogger(ChatFrame.class.getName()).log(Level.SEVERE, null, ex);
               }
            this.chatPanel.removeAll();
            this.chatPanel.setSize(443,231);
            this.chatPanel.revalidate();
            this.chatPanel.repaint();
    }//GEN-LAST:event_clearChatActionPerformed

    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
        try {
            this.clientSocket.close();
        } catch (IOException ex) {
            Logger.getLogger(ChatFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        LoginFrame loginFrame = new LoginFrame();
        this.dispose();
        loginFrame.setVisible(true);
    }//GEN-LAST:event_logoutActionPerformed

    private void searchFriendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFriendActionPerformed
         
        Search search = new Search(username);
        search.setVisible(true);
    }//GEN-LAST:event_searchFriendActionPerformed

    private void createGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createGroupActionPerformed
        String group_name = JOptionPane.showInputDialog("Enter The Group Name : ");
         String createQuery = "CREATE TABLE `"+group_name+"`(`id` INT AUTO_INCREMENT,`members` VARCHAR(100),`isadmin` BOOLEAN,PRIMARY KEY(`id`))";
         DefaultListModel model = new DefaultListModel();
         DefaultListModel model2 = new DefaultListModel();
         model2.addElement(group_name);
         model2.addElement(username);
         model.addElement("CREATE GROUP");
         model.addElement(createQuery);
         model.addElement(model2);
         sendToServer(model);
         
         DefaultListModel model3 = new DefaultListModel();
         int size=this.friendManager.friendlist.size();
         for(int i=0;i<size;i++)
         {
             DefaultListModel mymodel=this.friendManager.friendlist.get(i);
             model3.addElement(mymodel.elementAt(1).toString()+" ( "+mymodel.elementAt(0).toString()+" ) ");
         }
         groupSelector group = new groupSelector(model3);
          group.setVisible(true);
                 
    }//GEN-LAST:event_createGroupActionPerformed

    private void groupsMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_groupsMousePressed
        
        this.chatPanel.removeAll();
        this.chatPanel.setPreferredSize(new Dimension(443,231));
        this.chatPanel.revalidate();
        this.chatPanel.repaint();
        int p=this.groups.getSelectedIndex();
        DefaultListModel model2=this.groupManager.grouplist.get(p);
        this.friendOrGroupName.setText(model2.elementAt(0).toString());
        this.friendOrGroupStatus.setText(model2.elementAt(1).toString());
        this.friendOrGroupIsLogin.setVisible(false);
        this.selectedFriendOrGroupPanel.setVisible(true);
        this.myChatPanelHeight=0;
        this.jScrollPane3.revalidate();
        this.jScrollPane3.repaint();
        restoreChatHistory(model2.getElementAt(0).toString(),false);
        JScrollBar vertical = this.jScrollPane3.getVerticalScrollBar();
        vertical.setValue(this.myChatPanelHeight-40);
        System.out.println(this.myChatPanelHeight);
         
    }//GEN-LAST:event_groupsMousePressed

    private void updateStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateStatusActionPerformed
        JFrame myframe=new JFrame();
        myframe.setSize(400,55);
        myframe.setLocationRelativeTo(null);
        myframe.setVisible(false);
        JTextField myfield=new JTextField();
        myfield.setSize(320,25);
        myfield.setLocation(15,15);
        JButton mybutton =new JButton("UPDATE");
        mybutton.setBackground(Color.MAGENTA);
        mybutton.setSize(50,25);
        mybutton.setLocation(355,25);
        myframe.add(myfield,0);
        myframe.add(mybutton,1);
        myframe.revalidate();
        myframe.repaint();
        myframe.setVisible(true);
        
    }//GEN-LAST:event_updateStatusActionPerformed
      public void sendAndReceiveMessage(String message,boolean me)
      {
          int myTextWidth,myTextHeight,myPanelWidth,myPanelHeight,updatedHeight,updatedWidth ;
          int setx;
          JPanel myPanel =new JPanel();
          JLabel myLabel=new JLabel(message);
          
           AffineTransform at= new AffineTransform();
           FontRenderContext frc =new FontRenderContext(at,true,true);
           Font myTextFont= new Font("Tahoma",Font.PLAIN,15);
           myLabel.setFont(myTextFont);
           myPanel.add(myLabel, CENTER_ALIGNMENT);
           myTextWidth = (int) (myTextFont.getStringBounds(message,frc).getWidth());
           myTextHeight=(int) (myTextFont.getStringBounds(message,frc).getHeight());
           myPanelWidth=myTextWidth+18;
           myPanelHeight=myTextHeight+18;
           myPanel.setSize(myPanelWidth,myPanelHeight);
           updatedHeight=chatPanel.getSize().height;
           
           if(myChatPanelHeight+100>chatPanel.getSize().height)
          {
              updatedHeight=myChatPanelHeight+100;
              
          }
           
           if(me==true)
           {
               setx=20;
               myPanel.setBackground(Color.green);
           }
           else
           {
               setx=chatPanel.getSize().width-myPanelWidth-30;
               myPanel.setBackground(Color.gray);
               
           }
           chatPanel.setPreferredSize(new Dimension(chatPanel.getSize().width,updatedHeight));
           myChatPanelHeight+=20;
           myPanel.setLocation(setx,myChatPanelHeight);
           myChatPanelHeight+=myPanelHeight;
           chatPanel.add(myPanel);
           chatPanel.revalidate();
           chatPanel.repaint();
           
      }
      public void sendAndReciveFile(File file,boolean me)
      {
          String filename=file.getName();
         int myTextWidth,myTextHeight,myPanelWidth,myPanelHeight,updatedHeight,updatedWidth ;
          int setx;
          JPanel myPanel =new JPanel();
          JLabel myLabel=new JLabel(filename);
          JLabel icon=new JLabel();
          icon.setSize(40,40);
          icon.setIcon(new ImageIcon(this.myCurrentDirPath+"\\foldericon.png"));
           AffineTransform at= new AffineTransform();
           FontRenderContext frc =new FontRenderContext(at,true,true);
           Font myTextFont= new Font("Tahoma",Font.PLAIN,15);
           myLabel.setFont(myTextFont);
           myPanel.add(icon);
           myPanel.add(myLabel, CENTER_ALIGNMENT);
           myTextWidth = (int) (myTextFont.getStringBounds(filename,frc).getWidth());
           myTextHeight=(int) (myTextFont.getStringBounds(filename,frc).getHeight());
           myPanelWidth=myTextWidth+55;
           myPanelHeight=55;
           myPanel.setSize(myPanelWidth,myPanelHeight);
           updatedHeight=chatPanel.getSize().height;
           
           if(myChatPanelHeight+200>chatPanel.getSize().height)
          {
              updatedHeight=myChatPanelHeight+200;
              
          }
           
           if(me==true)
           {
               setx=20;
               myPanel.setBackground(Color.green);
           }
           else
           {
               setx=chatPanel.getSize().width-myPanelWidth-30;
               myPanel.setBackground(Color.gray);
               
           }
           chatPanel.setPreferredSize(new Dimension(chatPanel.getSize().width,updatedHeight));
           myChatPanelHeight+=20;
           myPanel.setLocation(setx,myChatPanelHeight);
           myChatPanelHeight+=myPanelHeight;
           chatPanel.add(myPanel);
           chatPanel.revalidate();
           chatPanel.repaint();
           
           
      }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChatFrame().setVisible(true);
                
                        
            }
        });
    }
     
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton attachmentButton;
    private javax.swing.JMenuItem changePassword;
    private javax.swing.JPanel chatPanel;
    private javax.swing.JMenuItem clearChat;
    private javax.swing.JLabel clientName;
    private javax.swing.JLabel clientProfilePhoto;
    private javax.swing.JMenuItem createGroup;
    private javax.swing.JTabbedPane friendAndGroup;
    private javax.swing.JLabel friendOrGroupIsLogin;
    private javax.swing.JLabel friendOrGroupName;
    private javax.swing.JLabel friendOrGroupPhoto;
    private javax.swing.JLabel friendOrGroupStatus;
    private javax.swing.JList friends;
    private javax.swing.JList groups;
    private javax.swing.JButton jButton2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JMenuItem logout;
    private javax.swing.JMenuItem menuAbout;
    private javax.swing.JMenuItem menuInstruct;
    private javax.swing.JMenuItem searchFriend;
    private javax.swing.JPanel selectedFriendOrGroupPanel;
    private javax.swing.JPanel selectedFriendOrGroupProfilePanel;
    private javax.swing.JTextField sendTextFeild;
    private javax.swing.JMenuItem updateStatus;
    // End of variables declaration//GEN-END:variables

   public void handler(DefaultListModel model) {
       if(model.elementAt(0).toString().equals("CHECK"))
       {
           if(model.elementAt(1).toString().equals("SUCCESS"))
           {
               System.out.println("vzjxcvsdjfgdsj");
              DefaultListModel model2= new DefaultListModel();
              model2.addElement("LOGIN");
              model2.addElement(this.username);
               sendToServer(model2);
           }
           else if(model.elementAt(1).toString().equals("WRONGP"))
           {
               JOptionPane.showMessageDialog(null,"YOU HAVE ENTERED WRONG PASSWORD\nENTER AGAIN");
               LoginFrame newframe=new LoginFrame();
               newframe.setVisible(true);
           }
           else if(model.elementAt(1).toString().equals("WRONGU"))
           {
               JOptionPane.showMessageDialog(null,"USERNAME IS WRONG OR DOES NOT EXIST\nENTER AGAIN");
               LoginFrame newframe=new LoginFrame();
               newframe.setVisible(true);
           }
       }
      else if(model.elementAt(0).toString().equals("LOGIN"))
       {
              this.clientName.setText(model.elementAt(1).toString());
              DefaultListModel friendList=new DefaultListModel();
              DefaultListModel groupList=new DefaultListModel();
              friendList=(DefaultListModel) model.getElementAt(2);
              groupList=(DefaultListModel) model.getElementAt(3);
              
              BufferedImage image = null;
                  String path=this.myCurrentDirPath+"\\ProfilePicture\\"+this.username+".jpg";
                  System.out.println(path);
                  try {
                      image=ImageIO.read(new File(path));
                  } catch (IOException ex) {
                      Logger.getLogger(ChatFrame.class.getName()).log(Level.SEVERE, null, ex);
                  }
                  Image im=image.getScaledInstance(84, 84,Image.SCALE_SMOOTH);
                  ImageIcon imageicon=new ImageIcon(im);
                  this.clientProfilePhoto.setIcon(imageicon);
                  
              int size=friendList.getSize();
              for(int i=0;i<size;i++)
              {
                  
                   DefaultListModel mymodel=(DefaultListModel)friendList.getElementAt(i);
                   this.friendManager.friendlist.add(i,mymodel);
              }
              
              size=groupList.getSize();
              for(int i=0;i<size;i++)
              {
                  
                   DefaultListModel mymodel=(DefaultListModel)groupList.getElementAt(i);
                   this.groupManager.grouplist.add(i,mymodel);
              }
              
              DefaultListModel newList=new DefaultListModel();
              size=this.friendManager.friendlist.size();
              for(int i=0;i<size;i++)
              {
              DefaultListModel mymodel2=(DefaultListModel)this.friendManager.friendlist.get(i);
              System.out.println(mymodel2.elementAt(0).toString());
              newList.addElement(mymodel2.elementAt(1));
              
                path=this.myCurrentDirPath;  
                path+="\\ChatHistory\\Friends\\"+mymodel2.elementAt(0).toString()+".txt";
                File myfile=new File(path);
               if(!myfile.exists())
                 {
                try {
                       myfile.createNewFile();
                       myfile.mkdir();
                     } catch (IOException ex) {
                     Logger.getLogger(ChatFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                 }
              }
              this.friends.setModel(newList);
              
              DefaultListModel newList2=new DefaultListModel();
              size=this.groupManager.grouplist.size();
              for(int i=0;i<size;i++)
              {
              DefaultListModel mymodel2=(DefaultListModel)this.groupManager.grouplist.get(i);
              System.out.println(mymodel2.elementAt(0).toString());
              newList2.addElement(mymodel2.elementAt(0));
              
                path=this.myCurrentDirPath;  
                path+="\\ChatHistory\\Groups\\"+mymodel2.elementAt(0).toString()+".txt";
                File myfile=new File(path);
               if(!myfile.exists())
                 {
                try {
                       myfile.createNewFile();
                       myfile.mkdir();
                     } catch (IOException ex) {
                     Logger.getLogger(ChatFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                 }
              }
              this.groups.setModel(newList2);
              
              this.setVisible(true);  
       }
       
       else if(model.elementAt(0).toString().equals("MESSAGE"))
       {
           String message;
           String path=this.myCurrentDirPath+"\\ChatHistory\\";
           if(model.elementAt(1).toString().equals("FRIEND"))
           {
               path+="Friends\\"+model.elementAt(2).toString()+".txt";
               message="1"+model.elementAt(4).toString();
               sendAndReceiveMessage(model.elementAt(4).toString(),false);
           }
           else
           {
               path+="Groups\\"+model.elementAt(2).toString()+".txt";
               message="1"+model.elementAt(5).toString()+": "+model.elementAt(4).toString();
               sendAndReceiveMessage(model.elementAt(5).toString()+" : "+model.elementAt(4).toString(),false);
           }
            File myfile=new File(path);
        try {
              PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(myfile, true)));
              System.out.println(message);
              out.println(message);
              out.close();
         
        } catch (IOException ex) {
            Logger.getLogger(ChatFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
           
       }
      
    }

    public void restoreChatHistory(String userorgroup, boolean b) {
        this.myChatPanelHeight=0;
        String path;
           if(b==true)
            {   
              path=this.myCurrentDirPath+"\\ChatHistory\\Friends\\"+userorgroup+".txt";
            }
           else
           {
              path=this.myCurrentDirPath+"\\ChatHistory\\Groups\\"+userorgroup+".txt";
           }
             File myfile=new File(path);
              
                  String str3;
          
            FileReader fr=null;
            try {
                fr = new FileReader(myfile);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(ChatFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            BufferedReader br=new BufferedReader(fr);
            int c=0;
            try {
                while((str3=br.readLine())!=null)
                {
                    System.out.println(c++);
                    System.out.println(str3);
                    if(str3.charAt(0)=='0')
                    {
                        str3=str3.substring(1);
                        sendAndReceiveMessage(str3, true);
                    }
                    else
                    {
                        str3=str3.substring(1);
                        sendAndReceiveMessage(str3, false);
                    }
                }
            } catch (IOException ex) {
                Logger.getLogger(ChatFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
           
            try {
                br.close();
            } catch (IOException ex) {
                Logger.getLogger(ChatFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    
    public byte[] loadFile(File file)
    {
        int filelength=(int)file.length();
        byte[] buffer=new byte[filelength];
        FileInputStream fis=null;
        try {
            fis = new FileInputStream(file);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ChatFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        DataInputStream dis=new DataInputStream(fis);
        try {
            dis.readFully(buffer);
        } catch (IOException ex) {
            Logger.getLogger(ChatFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        return buffer;
    }
    public void sendToServer(DefaultListModel model)
    {
        try {
                  OutputStream out = this.clientSocket.getOutputStream();
                  ObjectOutputStream oos = new ObjectOutputStream(out);
                  oos.writeObject(model);
                 // oos.close();
              } catch (IOException ex) {
                  Logger.getLogger(ChatFrame.class.getName()).log(Level.SEVERE, null, ex);
              }
    }
    
}

